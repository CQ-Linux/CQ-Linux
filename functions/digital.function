#additional software to install with build-a-pi
#20200513 km4ack

TEMPCRON=${MYPATH}/cron.tmp
DIR=${MYPATH}/temp
WHO=$(whoami)
mkdir -p ${DIR}
BUILDDIR=$HOME/.bap-source-files
mkdir -p ${BUILDDIR}

source ${MYPATH}/config

##################################
#	PAT WINLINK
##################################
PAT() {
	echo "##################"
	echo "installing pat"
	echo "##################"
	sudo mkdir ${HOME}/.config/pat
	PORT=8080
	cd ${DIR}
	if [ -f ${HOME}/.wl2k/config.json ]; then
		cp ${HOME}/.wl2k/config.json ${DIR}/config.json
	elif [ -f ${XDG_CONFIG_HOME}/pat/config.json ]; then
		cp $XDG_CONFIG_HOME/pat/config.json ${DIR}/config.json
	fi

	if [ `getconf LONG_BIT` = '64' ]; then
	#install deb file for 64 bit systems
	NEWPATV=$(curl -s https://github.com/la5nta/pat/releases | grep amd64 | head -1 | sed 's/.*pat_/pat_/' | sed 's/<\/a>.*$//')
	NEWPAT=$(echo ${NEWPATV} | sed 's/pat_//' | sed 's/_linux_amd64.deb//' | sed 's/0\.//')
	echo "new pat v ${NEWPATV}"
	echo "new pat ${NEWPAT}"
	wget --tries 2 --connect-timeout=60 https://github.com/la5nta/pat/releases/download/v0.${NEWPAT}/${NEWPATV}
	sudo cp ${HOME}/pi-build/config.json $XDG_CONFIG_HOME/pat/config.json
	sudo chmod 777 $XDG_CONFIG_HOME/pat/config.json
	sudo dpkg -i ${DIR}/${NEWPATV}
	
	else

	#install deb file for 32 bit systems
	NEWPATV=$(curl -s https://github.com/la5nta/pat/releases | grep amd64 | head -1 | sed 's/.*pat_/pat_/' | sed 's/<\/a>.*$//')
	NEWPAT=$(echo ${NEWPATV} | sed 's/pat_//' | sed 's/_linux_amd64.deb//' | sed 's/0\.//')
	echo "new pat v ${NEWPATV}"
	echo "new pat ${NEWPAT}"
	wget --tries 2 --connect-timeout=60 https://github.com/la5nta/pat/releases/download/v0.${NEWPAT}/${NEWPATV}
	sudo cp ${HOME}/pi-build/config.json $XDG_CONFIG_HOME/pat/config.json
	sudo chmod 777 $XDG_CONFIG_HOME/pat/config.json
	sudo dpkg -i ${DIR}/${NEWPATV}
	fi

	#lines below configure pat with user info
	pat http &
	sudo killall pat
	sudo systemctl start pat@${WHO}
	sudo systemctl enable pat@${WHO}
	cd ${DIR}
	PAT_VERSION=$(pat version | awk '{print $2}' | sed 's/v0.//;s/.0//')
	#The Pat Winlink config file will change location in version 0.12. The below if statement
	#checks to see which version is installed.
	#check to see if pat version is 12 or greater. Change config file location
	#depending on which version.
	if [ "$PAT_VERSION" -le 11 ]; then
	echo "pat version 11 detected"
	FIG=$HOME/.wl2k/config.json
	else
	echo "pat version 12 or greater detected"
	FIG=$XDG_CONFIG_HOME/pat/config.json
	fi
	#set callsign
	sed -i "s/\"mycall\": \".*\",/\"mycall\": \"${CALL}\",/" ${FIG}
	#set password
	WL2KPASS=$(grep "WL2KPASS" ${MYPATH}/config | sed 's/"//g' | sed 's/WL2KPASS=//')
	sed -i "s/\"secure_login_password\": \".*\",/\"secure_login_password\": \""$WL2KPASS"\",/" ${FIG}
	#set locator
	sed -i "s/\"locator\": \".*\",/\"locator\": \"$GRID\",/" ${FIG}
	#Change localhost to 0.0.0.0
	#This is a secutiry risk. See https://github.com/km4ack/pi-build/issues/299
	#Changed to 127.0.0.1 on 11OCT2021 KM4ACK
	sed -i "s/\"http_addr\": \".*\",/\"http_addr\": \"127.0.0.1:$PORT\",/" ${FIG}
	#jq '.ax25.rig = '\"my-rig\"'' ${FIG} | jq '.ardop.rig = '\"my-rig\"'' | jq '.hamlib_rigs = {'\"my-rig\"': {"address": "127.0.0.1:4532", "network": "tcp"}}' >~/Desktop/config.json
	jq '.ax25.rig = '\"my-rig\"'' ${FIG} | jq '.varafm.rig = '\"my-rig\"'' | jq '.varahf.rig = '\"my-rig\"'' | jq '.ardop.rig = '\"my-rig\"'' | \
	jq '.varafm.ptt_ctrl = 'true'' | jq '.varahf.ptt_ctrl = 'true'' | \
	jq '.hamlib_rigs = {'\"my-rig\"': {"address": "127.0.0.1:4532", "network": "tcp"}}' >~/Desktop/config.json	
	sudo chmod 777 ${HOME}/Desktop/config.json
	mv ${HOME}/Desktop/config.json ${FIG}
	sed -i 's/"enable_http": false,/"enable_http": true,/' ${FIG}

	if [ -f ${DIR}/config.json ]; then
		mv ${DIR}/config.json ${HOME}/.wl2k/
	fi

	PAT_OLD_SOURCE_INSTALL() {
	#This code is left for reference. This was used ot build pat from source when 64bit Pi OS was first released. 20220922
	#reference:
	#https://www.jeremymorgan.com/tutorials/raspberry-pi/install-go-raspberry-pi/
	#https://github.com/la5nta/pat/wiki/Building-from-source
	#https://cqdeks4td.blogspot.com/2021/11/installing-pat-open-source-winlink.html

	#install golang needed for pat build
	cd
	wget https://go.dev/dl/go1.17.7.linux-amd64.tar.gz
	sudo tar -C /usr/local -xzf go1.17.7.linux-amd64.tar.gz
	rm go1.17.7.linux-amd64.tar.gz

	echo "PATH=$PATH:/usr/local/go/bin" >> $HOME/.profile
	echo "GOPATH=$HOME/go" >> $HOME/.profile

	source $HOME/.profile

	#download/build latest pat
	cd
	git clone https://github.com/la5nta/pat
	cd pat
	./make.bash libax25
	./make.bash

	sudo cp $HOME/pat/debian/pat@.service /lib/systemd/system/
	sudo cp $HOME/pat/pat /usr/bin/
	rm -rf $HOME/pat
	}

}
##################################
##################################
#	PAT MENU
##################################
PAT-MENU() {
	#backup config files (Issue #119)
	if [ -f ${HOME}/patmenu2/config ]; then
		mkdir -p ${DIR}/patconfig
		cp ${HOME}/patmenu2/*config* ${DIR}/patconfig/
	fi
	#update pat menu
	if [ -d ${HOME}/patmenu2 ]; then
		rm -rf "${HOME}/patmenu2"
	fi
	cd ${HOME}
	git clone https://github.com/CQ-Linux/patmenu2.git ${HOME}/patmenu2

	#Verify that pat is on master branch. Pat can remain on an old branch
	#due to a workaround when moving to Pat version 12. This caused Pat Menu
	#to constantly report that it needed an update with the BAP update tool.
	PAT_VER=$(grep release $HOME/patmenu2/changelog | head -1 | sed 's/release=//;s/\.//g')
	if [ "$PAT_VER" -lt 260 ]; then
	cd $HOME/patmenu2
	git checkout master
	fi

	bash ${HOME}/patmenu2/setup
	sed -i "s/N0CALL/${CALL}/" ${HOME}/patmenu2/config
	sed -i 's/1,0/3,0/g' ${HOME}/patmenu2/config
	#restore config files
	if [ -d ${DIR}/patconfig/ ]; then
		mv ${DIR}/patconfig/* ${HOME}/patmenu2/
	fi
}
##################################
#	JS8Call
##################################
JS8CALL() {

	#find how much memory we are working with
	FREEMEM=$(free -m | grep Mem: | awk '{ print $2 }')
	echo ${FREEMEM}

	##################################
	#	INCREASE SWAP
	##################################
	#increase swap file if less than 3G memory
	if [ ${FREEMEM} -lt 3000 ]; then
		echo "Increasing Swap size for build"
		#increase swap size
		sudo sed -i 's/#CONF_SWAPFILE=\/var\/swap/CONF_SWAPFILE=\/var\/swap/' /etc/dphys-swapfile
		sudo sed -i 's/CONF_SWAPSIZE=100/CONF_SWAPSIZE=1024/' /etc/dphys-swapfile
		sudo /etc/init.d/dphys-swapfile restart
		sleep 10
	fi

#https://9a3gos.com/install-js8call-2-0-0-rc3-on-ubuntu-19-10-hamlib/

#Verify HAMLIB installed or JS8 Won't Build.
if ! hash rigctl 2>/dev/null; then
	source ${MYPATH}/functions/base.function && HAMLIB
	source ${MYPATH}/config
fi

echo "###############################"
echo "Installing JS8Call Dependancies"
echo "###############################"
sudo apt-get install -y build-essential gfortran autoconf automake libtool cmake git asciidoctor libfftw3-dev qtdeclarative5-dev texinfo libqt5multimedia5 libqt5multimedia5-plugins qtmultimedia5-dev libusb-1.0.0-dev libqt5serialport5-dev asciidoc libudev-dev

JS8PKG=$(curl -s http://files.js8call.com/latest.html | grep .tgz | sed 's/.*js8call-/js8call-/;s/<.*$//')
JS8VERSION=$(echo $JS8PKG | sed 's/js8call-//;s/.tgz.*$//')
cd ${BUILDDIR}
echo "###################"
echo "Downloading JS8Call"
echo "###################"
wget http://files.js8call.com/$JS8VERSION/$JS8PKG
tar -xvf $JS8PKG
rm $JS8PKG
cd ${BUILDDIR}/js8call
echo "#################"
echo "Compiling JS8Call"
echo "#################"
cmake -D CMAKE_INSTALL_PREFIX=$HOME/Downloads/js8call
cmake --build . -- -j4
sudo cp js8 js8call /usr/local/bin
sudo cp js8call.desktop /usr/share/applications
sudo cp ./artwork/icon_128.svg /usr/share/pixmaps/js8call_icon.svg

	#reset swap size to default
	if [ ${FREEMEM} -lt 3000 ]; then
		echo "Resetting swap size to default"
		#increase swap size
		sudo sed -i 's/CONF_SWAPFILE=\/var\/swap/#CONF_SWAPFILE=\/var\/swap/' /etc/dphys-swapfile
		sudo sed -i 's/CONF_SWAPSIZE=1024/CONF_SWAPSIZE=100/' /etc/dphys-swapfile
		sudo /etc/init.d/dphys-swapfile restart
		sleep 10
	fi

#Old Way left for reference
	#cd ${DIR}
	#JS8LATE=$(curl -s http://files.js8call.com/latest.html | grep amd64 | awk '{ print $2 }' | sed 's/href=//' | sed 's/"//g')
	#JS8PKG=$(curl -s http://files.js8call.com/latest.html | grep amd64 | awk '{ print $2 }' | sed 's/\///g' | sed 's/href="http:files.js8call.com[0-9].[0-9].[0-9]//' | sed 's/"//')
	#wget --tries 2 --connect-timeout=60 ${JS8LATE} || echo "Can't Download JS8Call" >>${BUILDLOG}
	#sudo dpkg -i ${JS8PKG}
	#sudo apt-get --fix-broken -y install
	#sudo dpkg -i ${JS8PKG}
}

##################################
#	WSJTX
##################################
WSJTX() {
	#find how much memory we are working with
	FREEMEM=$(free -m | grep Mem: | awk '{ print $2 }')
	echo ${FREEMEM}

	##################################
	#	INCREASE SWAP
	##################################
	#increase swap file if less than 3G memory
	if [ ${FREEMEM} -lt 3000 ]; then
		echo "Increasing Swap size for build"
		#increase swap size
		sudo sed -i 's/#CONF_SWAPFILE=\/var\/swap/CONF_SWAPFILE=\/var\/swap/' /etc/dphys-swapfile
		sudo sed -i 's/CONF_SWAPSIZE=100/CONF_SWAPSIZE=1024/' /etc/dphys-swapfile
		sudo /etc/init.d/dphys-swapfile restart
		sleep 10
	fi


	sudo apt install -y build-essential git cmake gfortran fftw3-dev qtbase5-dev qttools5-dev libqt5serialport5-dev  qtmultimedia5-dev libqt5multimedia5-plugins libqt5sql5-sqlite autoconf automake libtool texinfo libusb-1.0-0-dev libudev-dev libboost-all-dev asciidoctor

	FT8PKG=$(curl -s https://physics.princeton.edu/pulsar/k1jt/wsjtx.html | grep .tgz | sed 's/.*="//;s/">.*$//' | head -1)
	FT8DIR=$(echo $FT8PKG | sed 's/.tgz//')
	cd ${BUILDDIR}
	wget --tries 2 --connect-timeout=60 https://physics.princeton.edu/pulsar/k1jt/$FT8PKG
	tar -xvf $FT8PKG
	rm $FT8PKG
	cd $FT8DIR
	cmake -D CMAKE_INSTALL_PREFIX=${BUILDDIR}/$FT8DIR
	cmake -DWSJT_SKIP_MANPAGES=ON -DWSJT_GENERATE_DOCS=OFF
	sudo cmake --build . --target install -j4
	sudo mv ${BUILDDIR}/${FT8DIR}/bin/* /usr/local/bin/
	sudo cp ${BUILDDIR}/${FT8DIR}/share/applications/wsjtx.desktop /usr/share/applications/
	sudo cp ${BUILDDIR}/${FT8DIR}/share/pixmaps/wsjtx_icon.png /usr/share/pixmaps/

	#reset swap size to default
	if [ ${FREEMEM} -lt 3000 ]; then
		echo "Resetting swap size to default"
		#increase swap size
		sudo sed -i 's/CONF_SWAPFILE=\/var\/swap/#CONF_SWAPFILE=\/var\/swap/' /etc/dphys-swapfile
		sudo sed -i 's/CONF_SWAPSIZE=1024/CONF_SWAPSIZE=100/' /etc/dphys-swapfile
		sudo /etc/init.d/dphys-swapfile restart
		sleep 10
	fi

#old way of installing. left for reference
	#cd ${DIR}
	#WSPKG=$(curl -s https://physics.princeton.edu/pulsar/k1jt/wsjtx.html | grep amd64.deb | sed 's/^.*wsjtx/wsjtx/' | sed 's/deb.*$/deb/' | head -1)
	#wget --tries 2 --connect-timeout=60 --no-check-certificate https://physics.princeton.edu/pulsar/k1jt/$WSPKG
	#WSJTXSUCCESS=$?
	#sudo dpkg -i $WSPKG
	#sudo apt-get --fix-broken -y install
	#sudo dpkg -i $WSPKG
	#added to fix WSJTX 2.3.0
	#sudo sed -i "s/# en_US.UTF-8/en_US.UTF-8/g" /etc/locale.gen
	#sudo locale-gen
	#end edit for WSJTX 2.3.0
	#try sourcegorge if princeton.edu fails
	#WSJTX2() {
	#	if [ "$WSJTXSUCCESS" ! = 0 ]; then
	#		cd ${DIR}
	#		wget --tries 2 --connect-timeout=60 https://sourceforge.net/projects/wsjt/files/wsjtx-2.2.2/wsjtx_2.2.2_amd64.deb
	#		sudo dpkg -i wsjtx_2.2.2_amd64.deb
	#		sudo apt-get --fix-broken -y install
	#		sudo dpkg -i wsjtx_2.2.2_armhf.deb
	#	fi
	#}
	#WSJTX2

}



##################################
#	M0IAX Tools
##################################
M0IAX() {
	cd ${DIR} || return
	mkdir -p ${HOME}/bin/JS8Utils
	sudo mkdir -p /usr/local/bin/JS8Utils
	### bruce change to download and run the python script not the compiled python
	git clone https://github.com/m0iax/JS8CallUtilities_V2.git ${HOME}/bin/JS8Utils
	#wget https://m0iax.com/wp-content/uploads/2021/04/JS8CallUtils_v2_ubuntu2004.zip
	#unzip JS8CallUtils_v2_ubuntu2004.zip
	#rm JS8CallUtils_v2_ubuntu2004.zip
	cd /${HOME}/bin/JS8Utils
	pip3 install -r requirements.txt
	chmod +x JS8CallUtils_v2.py
	sudo mv *.* /usr/local/bin/JS8Utils
	pip install --upgrade maidenhead
	



	cat >m0iax.desktop <<EOF
[Desktop Entry]
Name=M0IAX JS8 Utils
GenericName=M0IAX JS8 Utils
Comment=GPS & Message Tool for JS8Call
Exec=python3 /usr/local/bin/JS8Utils/JS8CallUtils_v2.py
Terminal=false
Type=Application
Categories=hamutilities
EOF

	sudo mv m0iax.desktop /usr/share/applications/
}


##################################
#	QSSTV
##################################
QSSTV() {
	sudo apt-get install qsstv -y

}
##################################
#	GRIDTRACKER
##################################
GRIDTRACKER() {
	cd ${HOME} || return
	#sudo apt-get install -y libgconf-2-4
	wget --tries 2 --connect-timeout=60 https://storage.googleapis.com/gt_download/nwjs-downloader/v0.60.0-1/nwjs-downloader_0.60.0-0_all.deb
	sudo apt-get --fix-broken -y install
	sudo dpkg -i nwjs-downloader_0.60.0-0_all.deb
	rm nwjs*.*.*.deb
	
	#https://storage.googleapis.com/gt_download/v1.22.0725/gridtracker_1.22.0725_all.deb
	
	#GRIDDLL=$(curl -s https://storage.googleapis.com/gt_download/ | awk 'BEGIN{FS="<Key>"; OFS="\n<Key>"} {$1=$1} 1' | grep all.deb | sed '/<Key>nwjs/d;/<Key>test/d' | head -1 | sed 's/<Key>//;s/<\/Key>.*//')	
	#GT_DIR=$(echo $GRIDDLL | sed 's|/.*||')
	#GRIDDLL=$(echo $GRIDDLL | sed 's/.*GridTracker/GridTracker/')
	
	wget --tries 2 --connect-timeout=60 https://storage.googleapis.com/gt_download/v1.22.0725/gridtracker_1.22.0725_all.deb
	#GRIDTAR=$(echo $GRIDDLL | sed 's/.*\///g')
	sudo dpkg -i gridtracker_1.22.0725_all.deb
	rm gridtracker_1.22.0725_all.deb
	cat >gridtracker.desktop <<EOF
[Desktop Entry]
Name=GridTracker
Comment=GridTracker
GenericName=GridTracker, a WSJT-X Companion
Exec=/usr/bin/gridtracker --disable-accelerated-2d-canvas --num-raster-threads=2
Icon=/usr/share/gridtracker/gridview.png
Type=Application
Encoding=UTF-8
Terminal=false
Categories=HamRadio;
EOF

	sudo mv gridtracker.desktop /usr/share/applications/


}


##################################
#	YAAC
##################################
YAAC() {
	cd ${DIR} || return
	#wget --tries 2 --connect-timeout=60 https://sourceforge.net/projects/yetanotheraprsc/files/YAAC.zip/
	wget --tries 2 --connect-timeout=60 https://www.ka2ddo.org/ka2ddo/YAAC.zip
	sudo apt-get install -y librxtx-java openjdk-10-dbg
	mkdir -p ${HOME}/YAAC
	cd ${HOME}/YAAC || return
		#Fix issue 375 to prevent YAAC from reopening
		if [ -f ${HOME}/YAAC/YAAC ]; then
		rm ${HOME}/YAAC/YAAC
		fi
	touch YAAC
	echo "#!/bin/bash" >>YAAC
	echo "java -jar ${HOME}/YAAC/YAAC.jar" >>YAAC
	chmod +x YAAC
	cat >yaac.desktop <<EOF
[Desktop Entry]
Name=YAAC
GenericName=YAAC
Comment=APRS Client
Exec=${HOME}/YAAC/YAAC
Terminal=false
Type=Application
Categories=Network;HamRadio;
EOF

	sudo mv yaac.desktop /usr/share/applications/
	unzip -o ${DIR}/YAAC.zip
}

##################################
#	XASTIR
##################################
XASTIR() {
	###OLD CODE
	#sudo apt-get install -y xastir
	#sudo chmod +x /usr/bin/xastir
	#sudo sed -i 's/Exec=xastir/Exec=sudo xastir/' /usr/share/applications/xastir.desktop

	###NEW CODE 29JAN2021 Builds from source
	sudo apt-get -y install build-essential automake git xorg-dev libmotif-dev graphicsmagick \
		gv libcurl4-openssl-dev shapelib libshp-dev libpcre3-dev libproj-dev libdb-dev python-dev \
		libax25-dev libwebp-dev libwebp-dev libgraphicsmagick1-dev festival festival-dev

	cd ${BUILDDIR} || return
	git clone https://github.com/Xastir/Xastir.git
	cd Xastir || return
	./bootstrap.sh
	mkdir build
	cd build || return
	../configure
	make
	sudo make install
	sudo make clean

	cat >xastir.desktop <<EOF
[Desktop Entry]
Name=Xastir
Comment=X Amateur Station Tracking and Information Reporting
Exec=xastir
Icon=/usr/local/share/xastir/symbols/icon.png
Terminal=false
Type=Application
Categories=Network;HamRadio
Keywords=APRS;AX.25;HamRadio
EOF

	sudo mv xastir.desktop /usr/share/applications/

}

##################################
#	KM4ACK EES
##################################

EES() {

	#install PHP7.4 if not installed
	#this will also install apache2
	if ! hash php7.4 2>/dev/null; then
		sudo apt install -y php7.4
	fi
	#install ghostwriter if needed
	#this is used to mod the new index.html
	#page. 20200229
	if ! hash ghostwriter 2>/dev/null; then
		sudo apt-get install -y ghostwriter
	fi
	#Install the KM4ACK EES
	sudo mkdir /var/www/html/EES
	cd ${DIR} || return
	git clone https://github.com/km4ack/EES-LITE.git
	cd ${DIR}/EES-LITE || return
	#git dev branch of code
	git checkout dev
	sudo cp -r ${DIR}/EES-LITE/* /var/www/html/EES
	rm -rf "${DIR}/EES-LITE"
	cd /var/www/html/EES || return
	sudo chmod +x /var/www/html/EES/firstrun
	sudo /var/www/html/EES/./firstrun
	sudo sed -i "s/N0CALL/${CALL}/" /var/www/html/EES/config.php
	sudo sed -i 's/REMINDER\ FOR\ OPERATOR\ TO\ DO\ SOMETHING/ENABLE\ AUTO\ POST\ REPLY\ IN\ CRON/' /var/www/html/EES/config.php
	cd ${DIR} || return
	#Change Pat Winlink port so it won't interfer with the EES
	sed -i 's/:8080/:5000/' ${XDG_CONFIG_HOME}/pat/config.json
	sed -i 's/PORT=8080/PORT=5000/' ${HOME}/patmenu2/config

	sudo killall pat
	sudo systemctl start pat@${WHO}

	#Move info.markdown from EES folder to Documents
	sudo mv /var/www/html/EES/info.markdown ${HOME}/Documents/
	sudo chown ${WHO}:${WHO} ${HOME}/Documents/info.markdown
	#move info.html to pi documents folder
	sudo cp /var/www/html/EES/index.html ${HOME}/Documents/info.html
	sudo chown ${WHO}:${WHO} ${HOME}/Documents/info.html
	#move script to be run by cron to bin dir
	sudo mv /var/www/html/EES/webcopy ${HOME}/bin/
	sudo chown ${WHO}:${WHO} ${HOME}/bin/webcopy
	sudo chmod +x ${HOME}/bin/webcopy

	#set up cron job for EES
	echo "#-----Start EES Server Options------" >>${TEMPCRON}
	echo "#Move EES email to Pat Winlink Outbox" >>${TEMPCRON}
	echo "*/1 * * * * /var/www/html/EES/movetopat" >>${TEMPCRON}
	echo " " >>${TEMPCRON}
	echo "#Auto post replies for EES server" >>${TEMPCRON}
	echo "#Default is off. Activate by removing # on line below" >>${TEMPCRON}
	echo "#*/1 * * * * /var/www/html/EES/autopostreply" >>${TEMPCRON}
	echo "#Line below moves info.html to index.html when modified" >>${TEMPCRON}
	echo "*/1 * * * * ${HOME}/bin/webcopy" >>${TEMPCRON}
	echo "#-----End EES Server Options------" >>${TEMPCRON}

}

##################################
#	Pi-APRS
##################################
PI-APRS() {
	cd ${HOME} || return
	git clone https://github.com/km4ack/Pi-APRS.git
cat <<EOF > /run/user/$UID/piaprs.desktop
[Desktop Entry]
Name=Pi-APRS
GenericName=Pi-ARPS by KM4ACK
Comment=Pi-APRS by KM4ACK
Exec=/home/`whoami`/Pi-APRS/pi-aprs
Icon=/home/`whoami`/Pi-APRS/ISS.png
Terminal=true
Type=Application
Categories=HamRadio;
EOF
	sudo cp /run/user/$UID/piaprs.desktop /usr/share/applications/

}


##################################
#	JTDX
##################################
#This code is left in place but no option is given during inital
#run or update because the jtdx website is down.
#see https://github.com/km4ack/pi-build/issues/153
#14OCT2020 KM4ACK

JTDX() {
	cd ${HOME}
	#curl won't work here. Returns "forbidden" Use wget instead
	wget -qO jtdx.txt https://www.jtdx.tech/en/
	VER=$(grep armhf.deb jtdx.txt | awk '{print $2}' | sed 's/"//g' | sed 's/href=\/downloads\/Linux\///')
	rm jtdx.txt

	wget https://www.jtdx.tech/downloads/Linux/${VER}

	sudo dpkg -i ${VER}
	sudo apt-get --fix-broken -y install
	sudo dpkg -i ${VER}
	rm ${VER}
}


##################################
#	WSJTX-Z install W1BAW
##################################
WSJTXZ() {
	#https://github.com/shuyuan-liu/sdr-tutorials
	echo "##################"
	echo "installing SDR++"
	echo "##################"
	cd $HOME/Downloads
	wget https://github.com/AlexandreRouma/SDRPlusPlus/releases/download/1.0.4/sdrpp_debian_bullseye_amd64.deb
	
}

##################################
#	JTDX install W1BAW
##################################
JTDX() {
	#https://github.com/shuyuan-liu/sdr-tutorials
	echo "##################"
	echo "installing SDR++"
	echo "##################"
	cd $HOME/Downloads
	wget https://github.com/AlexandreRouma/SDRPlusPlus/releases/download/1.0.4/sdrpp_debian_bullseye_amd64.deb
	
}

